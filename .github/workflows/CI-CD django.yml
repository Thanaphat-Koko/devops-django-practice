name: CI/CD for Django App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: dj-jrd
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          poetry install

      - name: Wait for PostgreSQL to be ready
        run: sleep 20s

      - name: Run Django tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: dj-jrd
          DB_USER: postgres
          DB_PASSWORD: password
        run: |
          poetry run python manage.py migrate
          poetry run python manage.py test

      - name: Send Test Failure Notification to Discord
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content": "‚ùå Django test failed on commit: ${{ github.sha }}"}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Test Success Notification to Discord
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content": "‚úÖ Django tests passed successfully on commit: ${{ github.sha }}"}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #     - name: Check out the repository
  #       uses: actions/checkout@v3

  #     - name: Log in to Amazon ECR
  #       id: ecr-login
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build and push Docker image to ECR
  #       run: |
  #         REGION="ap-southeast-1"
  #         ECR_REPOSITORY="my-django-app"
  #         IMAGE_TAG="${{ github.sha }}"

  #         docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
  #         docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          
  #         docker push $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

  #     - name: Deploy to ECS
  #       run: |
  #         CLUSTER_NAME="my-ecs-cluster"
  #         SERVICE_NAME="my-django-service"
  #         TASK_FAMILY="my-task-family"

  #         aws ecs update-service \
  #           --cluster $CLUSTER_NAME \
  #           --service $SERVICE_NAME \
  #           --force-new-deployment

      # - name: Send Deploy Success Notification to Discord
      #   if: success()
      #   run: |
      #     curl -H "Content-Type: application/json" \
      #     -X POST \
      #     -d '{"content": "üöÄ Deploy succeeded for commit: ${{ github.sha }}"}' \
      #     ${{ secrets.DISCORD_WEBHOOK_URL }}

      # - name: Send Deploy Failure Notification to Discord
      #   if: failure()
      #   run: |
      #     curl -H "Content-Type: application/json" \
      #     -X POST \
      #     -d '{"content": "‚ùå Deploy failed for commit: ${{ github.sha }}"}' \
      #     ${{ secrets.DISCORD_WEBHOOK_URL }}