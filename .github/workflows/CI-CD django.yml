name: CI/CD for Django App

on:
  push:
    branches:
      - main
      - prod_test
  pull_request:
    branches:
      - main
env:
  ECR_REPOSITORY: devops-django           # set this to your Amazon ECR repository name

jobs:
  # Test:
  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres:14
  #       env:
  #         POSTGRES_DB: ${{ vars.POSTGRES_DB }}
  #         POSTGRES_USER: ${{ vars.POSTGRES_USER }}
  #         POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
  #       ports:
  #         - ${{ vars.DB_PORT }}:${{ vars.POSTGRES_PORT }}
  #       options: >-
  #         --health-cmd="pg_isready -U postgres"
  #         --health-interval=10s
  #         --health-timeout=5s
  #         --health-retries=5

  #   steps:
  #     - name: Check out the repository
  #       uses: actions/checkout@v3

  #     - name: Set up Django
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         poetry install

  #     - name: Wait for PostgreSQL to be ready
  #       run: sleep 20s

  #     - name: Run Django tests
  #       env:
  #         DB_HOST: ${{ vars.DB_HOST }}
  #         DB_PORT: ${{ vars.DB_PORT }}
  #         DB_NAME: ${{ vars.DB_NAME }}
  #         DB_USER: ${{ vars.DB_USER }}
  #         DB_PASSWORD: ${{ vars.DB_PASSWORD }}
  #       run: |
  #         poetry run python manage.py migrate
  #         poetry run python manage.py test

  #     - name: Send Test Failure Notification to Discord
  #       if: failure()
  #       run: |
  #         curl -H "Content-Type: application/json" \
  #         -X POST \
  #         -d '{"content": "‚ùå Django test failed on commit: ${{ github.sha }}"}' \
  #         ${{ secrets.DISCORD_WEBHOOK_URL }}

  #     - name: Send Test Success Notification to Discord
  #       if: success()
  #       run: |
  #         curl -H "Content-Type: application/json" \
  #         -X POST \
  #         -d '{"content": "‚úÖ Django tests passed successfully on commit: ${{ github.sha }}"}' \
          # ${{ secrets.DISCORD_WEBHOOK_URL }}

  Build_and_Push:
      name: Build_and_Push
      runs-on: ubuntu-latest
      # needs: Test

      steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG1: django-web
          IMAGE_TAG2: nginx-web
        run: |
          docker build -t $IMAGE_TAG2 ./nginx
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG2" >> $GITHUB_OUTPUT





  # Build:
  #   runs-on: ubuntu-latest
  #   needs: Test

  #   steps:
  #     - name: Check out the repository
  #       uses: actions/checkout@v3

  #     - name: Log in to Amazon ECR
  #       id: ecr-login
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build and push Docker image to ECR
  #       run: |
  #         REGION="ap-southeast-1"
  #         ECR_REPOSITORY="my-django-app"
  #         IMAGE_TAG="${{ github.sha }}"

  #         docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
  #         docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          
  #         docker push $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

  #     - name: Deploy to ECS
  #       run: |
  #         CLUSTER_NAME="my-ecs-cluster"
  #         SERVICE_NAME="my-django-service"
  #         TASK_FAMILY="my-task-family"

  #         aws ecs update-service \
  #           --cluster $CLUSTER_NAME \
  #           --service $SERVICE_NAME \
  #           --force-new-deployment

      # - name: Send Deploy Success Notification to Discord
      #   if: success()
      #   run: |
      #     curl -H "Content-Type: application/json" \
      #     -X POST \
      #     -d '{"content": "üöÄ Deploy succeeded for commit: ${{ github.sha }}"}' \
      #     ${{ secrets.DISCORD_WEBHOOK_URL }}

      # - name: Send Deploy Failure Notification to Discord
      #   if: failure()
      #   run: |
      #     curl -H "Content-Type: application/json" \
      #     -X POST \
      #     -d '{"content": "‚ùå Deploy failed for commit: ${{ github.sha }}"}' \
      #     ${{ secrets.DISCORD_WEBHOOK_URL }}