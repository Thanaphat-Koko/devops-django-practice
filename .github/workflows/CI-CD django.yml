name: CI/CD for Django App

on:
  push:
    branches:
      - main
      - prod_test
  pull_request:
    branches:
      - main
env:
  ECR_REPOSITORY: devops-django
  ECS_SERVICE: django-web-service
  ECS_CLUSTER: django-web-cluster
  ECS_TASK_DEFINITION: ./task_definition.json
  CONTAINER_NAME: django-web           # set this to your Amazon ECR repository name

jobs:
  # Test:
  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres:14
  #       env:
  #         POSTGRES_DB: ${{ vars.POSTGRES_DB }}
  #         POSTGRES_USER: ${{ vars.POSTGRES_USER }}
  #         POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
  #       ports:
  #         - ${{ vars.DB_PORT }}:${{ vars.POSTGRES_PORT }}
  #       options: >-
  #         --health-cmd="pg_isready -U postgres"
  #         --health-interval=10s
  #         --health-timeout=5s
  #         --health-retries=5

  #   steps:
  #     - name: Check out the repository
  #       uses: actions/checkout@v3

  #     - name: Set up Django
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         poetry install

  #     - name: Wait for PostgreSQL to be ready
  #       run: sleep 20s

  #     - name: Run Django tests
  #       env:
  #         DB_HOST: ${{ vars.DB_HOST }}
  #         DB_PORT: ${{ vars.DB_PORT }}
  #         DB_NAME: ${{ vars.DB_NAME }}
  #         DB_USER: ${{ vars.DB_USER }}
  #         DB_PASSWORD: ${{ vars.DB_PASSWORD }}
  #       run: |
  #         poetry run python manage.py migrate
  #         poetry run python manage.py test

  #     - name: Send Test Success Notification to Discord
  #       if: success()
  #       run: |
  #         curl -H "Content-Type: application/json" \
  #         -X POST \
  #         -d '{"content": "‚úÖ Django tests passed successfully on commit: ${{ github.sha }}"}' \
  #         ${{ secrets.DISCORD_WEBHOOK_URL }}

  #     - name: Send Test Failure Notification to Discord
  #       if: failure()
  #       run: |
  #         curl -H "Content-Type: application/json" \
  #         -X POST \
  #         -d '{"content": "‚ùå Django test failed on commit: ${{ github.sha }}"}' \
  #         ${{ secrets.DISCORD_WEBHOOK_URL }}


  Build_and_Deploy:
      name: Build_and_Deploy
      runs-on: ubuntu-latest
      #needs: Test

      steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to Amazon ECR
        id: build-and-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG1: django-web-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG1" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.2
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-and-push-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Send Deploy Success Notification to Discord
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content": "üöÄ Deploy succeeded for commit: ${{ github.sha }}"}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Deploy Failure Notification to Discord
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
          -X POST \
          -d '{"content": "‚ùå Deploy failed for commit: ${{ github.sha }}"}' \
          ${{ secrets.DISCORD_WEBHOOK_URL }}